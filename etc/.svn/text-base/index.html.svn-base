<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Queueue: A portable Amazon Simple Queue Service stub in Ruby</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

<meta name="description" content="Queueue is a Ruby implementation of the AWS SQS (Amazon Simple Queue Service) server REST API" />

<meta name="keywords" content="ruby, gem, ruby gem, amazon, amazon sqs, simple queue service, sqs gem, sqs plugin, download queueue, queueue" />

<meta http-equiv="content-language" content="en" />
<meta name="distribution" content="global" />
<meta content="ALL" name="robots" />
<meta name="robots" content="all, index, follow" />
<meta http-equiv="revisit-after" content="7 days"/>

<style type="text/css" media="screen">
	em {
		background-color: yellow;
	}
</style>

</head>

<body>
	<h1>Queueue</h1>
	<ul>
		<li><a href="#download">Download</a></li>
		<li><a href="#installation">Installation</a></li>
		<li><a href="#usage">Usage</a></li>
		<li><a href="#embedding">Embedding Queueue</a></li>
		<li><a href="/q/rdoc">rdoc</a></li>
		<li><a href="#not-supported">Not supported (yet)</a></li>
	</ul>
	<p>
		Queueue is a <a href="http://ruby-lang.org">Ruby</a> implementation of the <a href="http://aws.amazon.com/sqs">AWS SQS</a> (Amazon Simple Queue Service) server <a href="http://docs.amazonwebservices.com/AWSSimpleQueueService/2006-04-01/REST_RestOperations.html">REST API</a>. Queues and messages on Queueue are not persisted, only stored in memory and are gone when the service is shut down. 
	</p>
	<p>
		Current version is <em>0.0.8</em>
	</p>
	<p>
		Queueue depends on <a href="http://sinatra.rubyforge.org/" title="Sinatra : Classy web-development dressed in a DSL">Sinatra</a>.
	</p>
	<p>
		I use Queueue for testing SQS code locally. I recently started using it as a means of instrumenting concurrent Ruby processes. It would be nice to hear of any other things people do with it. Do consider leaving a <a href="http://nutrun.com/weblog/queueue-a-portable-amazon-sqs-stub-in-ruby/#comments">comment</a> with any interesting usages you might come up with. Ditto for bugs, patches or features you'd like to see. 
	</p>
	<p>
		Queueue was, of course, inspired by <a href="http://code.whytheluckystiff.net/parkplace" title="Park Place, the Amazon-S3 clone">Park Place</a>.
	</p>
	<div id="download">
		<h2>Download</h2>
		<ul>
			<li>
				<a href="releases/queueue-0.0.8.gem">queueue-0.0.8.gem</a>
				<em>Latest</em>
			</li>
			<li>
				<a href="releases/queueue-0.0.7.gem">queueue-0.0.7.gem</a>
			</li>
			<li>
				<a href="releases/queueue-0.0.6.gem">queueue-0.0.6.gem</a>
			</li>
			<li>
				<a href="releases/queueue-0.0.5.gem">queueue-0.0.5.gem</a>
			</li>
			<li>
				<a href="releases/queueue-0.0.4.gem">queueue-0.0.4.gem</a>
			</li>
			<li>
				<a href="releases/queueue-0.0.3.gem">queueue-0.0.3.gem</a>
			</li>
			<li>
				<a href="releases/queueue-0.0.2.gem">queueue-0.0.2.gem</a>
			</li>
			<li>
				<a href="releases/queueue-0.0.1.gem">queueue-0.0.1.gem</a>
			</li>
		</ul>
	</div>
	<div id="installation">
		<h2>Installation</h2>
		<p>
			<code>gem install queueue-&lt;version&gt;.gem -y</code>
		</p>
	</div>
	<div id="usage">
		<h2>Usage</h2>
		<p>
			Invoke "<code>queueue</code>" from the command line to start the server.
		</p>
		<p>
			Currently, only one user is supported. The default values of the Access Key ID and Secret Access Key are both "queueue".
		</p>
		<p>
			 A configuration file named <code>queueue.yml</code> will be picked up and used by Queueue if found on the same location where <code>queueue</code> was invoked from. The contents of <code>queueue.yml</code> should look like this:
		</p>
		<pre>
host: "127.0.0.1"
port: "2323"
access_key_id: "iamtheworldthathides"
secret_access_key: "theuniversalsecretofalltime"
log_file: "queueue.log"
		</pre>
	</div>
	<div id="embedding">
		<h2>Embedding Queueue</h2>
		<p>
			Queueue can be embedded in Ruby programs, i.e. used independent of its RESTful HTTP interface. Requiring <code>queueue</code> will load a Mongrel independent version of the QueueService API.
		</p>
		<p>
			For example:
		</p>
		<pre>
require 'rubygems'
require 'queueue'

service = Queueue::QueueService.new
service.create_queue 'q'
service.send_message 'q', 'Message body...'
messages = service.receive_message 'q'
messages.first.body # =&gt; "Message body..."
		</pre>
		<p>
			<a href="/q/rdoc">Queueue rdoc</a>
		</p>
	</div>
	<div id="not-supported">
		<h2>Not supported (yet)</h2>
		<p>
			Queueue doesn't yet support the following SQS features:
		</p>
		<ul>
			<li>
				<strike>Authentication</strike>
				Single user authentication is supported as of version 0.0.2
			</li>
			<li>Multi user support</li>
			<li>Storing queues and messages to disk</li>
		</ul>
		<p>
			Error messages are not the same as the ones SQS returns, but validation, error format and codes should be identical. 
		</p>
	</div>
	<p>
		You might want to subscribe to the <a href="http://nutrun.com/feed">nutrun feed</a>, as I will be posting updates on subsequent Queueue releases there. 
	</p>
	<p>
		<small>Queueue is copyright &copy; 2007<a href="http://nutrun.com">nutrun.com</a>. Queueue is Open Source Software - <a href="license.txt" title="LICENSE">LICENSE</a></small>
	</p>
</body>
</html>
